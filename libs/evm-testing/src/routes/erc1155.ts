import { Request, Response } from 'express';
import { AbiItem } from 'web3-utils';
import { erc1155Mint } from '../types';
import erc_1155_abi from '../utils/abi/erc1155';
import { erc_1155 } from '../utils/contracts';
import getProvider from '../utils/getProvider';

/**
 * Generated by compiling the following contract on remix:
 *
 * pragma solidity ^0.8.20;
 * import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol";
 *
 * contract TestErc1155 is ERC1155 {
 *   constructor() ERC1155('uri') {}
 *
 *   function mint(address to, uint256 id, uint256 value) external {
 *     _mint(to, id, value, "");
 *   }
 * }
 */

export const deploy1155 = async (req: Request, res: Response) => {
  try {
    const provider = getProvider();
    const contract = new provider.eth.Contract(erc_1155_abi as AbiItem[]);
    const account = (await provider.eth.getAccounts())[0];
    await contract
      .deploy({ data: testErc1155Bytecode })
      .send({ from: account, gas: '5000000' })
      .on('receipt', function (receipt) {
        res
          .status(200)
          .json({ contractAddress: receipt.contractAddress })
          .send();
      });
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({
        message: 'Internal server error',
        error: String(err),
      })
      .send();
  }
};

export const mint1155 = async (req: Request, res: Response) => {
  try {
    const request: erc1155Mint = req.body;
    const provider = getProvider();
    const contract = erc_1155(request.contractAddress, provider);
    const accounts = await provider.eth.getAccounts();

    const tx = await contract.methods.mint(
      request.to,
      Number(request.tokenId),
      request.amount,
    );
    const txReceipt = await tx.send({ from: accounts[0], gas: '500000' });

    res
      .status(200)
      .json({ block: Number(txReceipt['blockNumber']) })
      .send();
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({
        message: 'Internal server error',
        error: String(err),
      })
      .send();
  }
};
